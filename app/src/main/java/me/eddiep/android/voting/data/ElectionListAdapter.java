package me.eddiep.android.voting.data;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.content.ContextCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import java.text.SimpleDateFormat;
import java.util.List;

import me.eddiep.android.voting.ElectionDetailActivity;
import me.eddiep.android.voting.R;

public class ElectionListAdapter extends ArrayAdapter<Election> {
    private LayoutInflater vi;
    private Activity owner;
    private Typeface bold;
    private Typeface light;

    private static final SimpleDateFormat format = new SimpleDateFormat("EEEE MMMM dd, yyyy");
    public ElectionListAdapter(Context context, List<Election> elections, Activity owner) {
        super(context, -1, elections);
        vi = LayoutInflater.from(context);
        this.owner = owner;

        bold = Typeface.createFromAsset(context.getAssets(), "GOTHAM-BOLD.TTF");
        light = Typeface.createFromAsset(context.getAssets(), "GOTHAM-LIGHT.TTF");
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View v = convertView;
        ViewHolder holder;

        if (v == null) {
            v = vi.inflate(R.layout.election_item, parent, false);
        }

        if (v.getTag() != null) {
            holder = (ViewHolder)v.getTag();
        } else {
            holder = new ViewHolder();
            holder.title = (TextView) v.findViewById(R.id.electionTitle);
            holder.date = (TextView) v.findViewById(R.id.electionDate);
            holder.pin = (FloatingActionButton) v.findViewById(R.id.electionPin);
            holder.background = (ImageView) v.findViewById(R.id.electionBackground);

            v.setTag(holder);
        }

        final Election election = getItem(position);
        if (election != null) {
            Drawable d = getDrawable(owner, election.getBackground());
            holder.background.setImageDrawable(d);

            holder.title.setText(election.getName());
            holder.title.setTypeface(bold);
            String formattedDate = format.format(election.getDate().toDate());
            int daysLeft = election.getDaysRemaining();
            String dayText;
            if (daysLeft == 0) {
                dayText = "Today";
            } else if (daysLeft == 1) {
                dayText = "Tomorrow";
            } else {
                dayText = daysLeft + " days away";
            }
            holder.date.setText(formattedDate + "   |   " + dayText);
            holder.date.setTypeface(light);

            if (election.isPinned())
                holder.pin.setVisibility(View.INVISIBLE);
            else
                holder.pin.setVisibility(View.VISIBLE);

            holder.pin.setFocusable(false);
            holder.pin.setFocusableInTouchMode(false);

            holder.pin.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    election.setIsPinned(true);

                    notifyDataSetChanged();
                }
            });
        }

        return v;
    }

    /**
     * Return a drawable object associated with a particular resource ID.
     * <p>
     * Starting in {@link android.os.Build.VERSION_CODES#LOLLIPOP}, the returned
     * drawable will be styled for the specified Context's theme.
     *
     * @param id The desired resource identifier, as generated by the aapt tool.
     *            This integer encodes the package, type, and resource entry.
     *            The value 0 is an invalid identifier.
     * @return Drawable An object that can be used to draw this resource.
     */
    public final Drawable getDrawable(Context context, int id) {
        final int version = Build.VERSION.SDK_INT;
        if (version >= 21) {
            return ContextCompat.getDrawable(context, id);
        } else {
            return context.getResources().getDrawable(id);
        }
    }

    static class ViewHolder {
        TextView title;
        TextView date;
        FloatingActionButton pin;
        ImageView background;
    }
}
